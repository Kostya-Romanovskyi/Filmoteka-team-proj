{"mappings":"AAEA,IAAIA,EAAS,GAEb,MAAMC,EAASC,SAASC,cAAc,gBAChCC,EAAUF,SAASC,cAAc,YACjCE,EAAkBH,SAASC,cAAc,iBACzCG,EAAkBJ,SAASC,cAAc,qBAwF/C,SAASI,EAAOC,GACdH,EAAgBI,UAAYD,EACzBE,KAAIC,IAEH,MAAMC,EAAYD,EAAME,YAEpB,kCAAkCF,EAAME,cADxC,kCAaEC,EAAad,EAAOe,QAAO,CAACC,EAAeC,IAC3CN,EAAMO,UAAUC,SAASF,EAAMG,KACjCC,QAAQC,IAAIN,GACLA,EAAgBC,EAAMM,KAAO,KAE/BP,GACN,I,IAUwBQ,EAR3B,MAAO,oFAE4Bb,EAAMS,4CACTR,WAAkBD,EAAMc,0DAE7Bd,EAAMc,qFAELX,4CAC2B,QAA5BU,EAAAE,SAASf,EAAMgB,qBAAa,IAA5BH,IAAgC,qEAIpD,IAERI,KAAK,G,CA9HV3B,EAAO4B,iBAAiB,UAUxB,SAAgBC,GACdA,EAAIC,iBAEJ,MAAMC,EAAa/B,EAAOgC,SAASC,YAAYC,MAE/C,GADAd,QAAQC,IAAIrB,EAAOgC,WACdD,EACH,OAWF1B,EAAgB8B,QAAS,EARLC,WAClB,MAAMC,QAAiBC,MACrB,4FAAsEP,YAGxE,aADqBM,EAASE,MACjB,EAIfC,GACGC,MAAKlC,IACJ,IAAKA,EAAOmC,cAGV,MAFAvC,EAAQwC,YACN,iEACI,IAAIC,MACR,kEAIJC,aAAaC,QACX,cACAC,KAAKC,UAAU,CACbC,KAAM,UACNC,OAAQ3C,KAGZD,EAAOC,EAAO4C,QAAQ,IAEvBC,OAAMC,IACLjC,QAAQC,IAAIgC,EAAM,IAEnBC,SAAQ,KACPjD,EAAgB8B,QAAS,CAAI,G,IAhD9BU,aAAqB,QA+HJT,WAClB,MAAMC,QAAiBC,MACrB,yGAGF,aADqBD,EAASE,MACjB,EAGfgB,GACGd,MAAKe,IACJpC,QAAQC,WAAW0B,KAAKC,UAAUQ,EAAKC,SACvCZ,aAAaC,QAAQ,cAAeC,KAAKC,UAAUQ,EAAKC,QAAQ,IAEjEL,OAAMC,IACLjC,QAAQC,IAAIgC,EAAM,IAhFtBhD,EAAgB8B,QAAS,EARHC,WACpB,MAAMC,QAAiBC,MACrB,6FAGF,aADqBD,EAASE,MACjB,EAKfmB,GACGjB,MAAKlC,IACJsC,aAAaC,QACX,cACAC,KAAKC,UAAU,CACbC,KAAM,WACNC,OAAQ3C,KAGZR,EAASgD,KAAKY,MAAMd,aAAae,QAAQ,gBACzCtD,EAAOC,EAAO4C,QAAQ,IAEvBC,OAAMC,IACLjC,QAAQC,IAAIgC,EAAM,IAEnBC,SAAQ,KACPjD,EAAgB8B,QAAS,CAAI","sources":["src/js/trends-and-search.js"],"sourcesContent":["const API_KEY = '63240915768e2fa639cf91287e69284e';\nconst TRENDING_TIME = 'week';\nlet genres = [];\n\nconst formEl = document.querySelector('.search-form');\nconst message = document.querySelector('.message');\nconst markupContainer = document.querySelector('.movie-markup');\nconst loaderContainer = document.querySelector('.loader-container');\n\nformEl.addEventListener('submit', search);\n\n// фетчим тренди та жанри\nif (!localStorage['genres']) {\n  getGenres();\n}\n// genres = JSON.parse(localStorage.getItem('localGenres'));\n// genres = JSON.parse(localStorage['localGenres']);\ntrending();\n\nfunction search(evt) {\n  evt.preventDefault();\n  let page = 1;\n  const inputValue = formEl.elements.searchQuery.value;\n  console.log(formEl.elements);\n  if (!inputValue) {\n    return;\n  }\n\n  const fetchMovies = async () => {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${inputValue}&page=${page}`\n    );\n    const movies = await response.json();\n    return movies;\n  };\n\n  loaderContainer.hidden = false;\n  fetchMovies()\n    .then(movies => {\n      if (!movies.total_results) {\n        message.textContent =\n          'Search result not successful. Enter the correct movie name and';\n        throw new Error(\n          'Search result not successful. Enter the correct movie name and'\n        );\n      }\n\n      localStorage.setItem(\n        'currentPage',\n        JSON.stringify({\n          type: 'serched',\n          result: movies,\n        })\n      );\n      render(movies.results);\n    })\n    .catch(error => {\n      console.log(error);\n    })\n    .finally(() => {\n      loaderContainer.hidden = true;\n    });\n}\n\nfunction trending() {\n  const fetchTrending = async () => {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/trending/movie/${TRENDING_TIME}?api_key=${API_KEY}`\n    );\n    const movies = await response.json();\n    return movies;\n  };\n\n  loaderContainer.hidden = false;\n\n  fetchTrending()\n    .then(movies => {\n      localStorage.setItem(\n        'currentPage',\n        JSON.stringify({\n          type: 'trending',\n          result: movies,\n        })\n      );\n      genres = JSON.parse(localStorage.getItem('localGenres'));\n      render(movies.results);\n    })\n    .catch(error => {\n      console.log(error);\n    })\n    .finally(() => {\n      loaderContainer.hidden = true;\n    });\n}\n\nfunction render(movies) {\n  markupContainer.innerHTML = movies\n    .map(movie => {\n      // заглушка для відсутньої картинки\n      const imageSrc = !movie.poster_path\n        ? 'https://image.tmdb.org/t/p/w500'\n        : `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n      // const cardGenres = genres\n      //   .filter(genre => {\n      //     if (movie.genre_ids.includes(genre.id)) {\n      //       return genre.name;\n      //     }\n      //   })\n      //   .map(genre => genre.name)\n      //   .join(' ');\n      // console.log(cardGenres);\n\n      const cardGenres = genres.reduce((previousValue, genre) => {\n        if (movie.genre_ids.includes(genre.id)) {\n          console.log(previousValue);\n          return previousValue + genre.name + ' ';\n        }\n        return previousValue;\n      }, '');\n\n      return `\n        <a class=\"card__link\" href=\"\">\n        <li class=\"card__item\" data-id=${movie.id}>\n        <img class=\"card__img\" src=\"${imageSrc}\" alt=\"${movie.title}\">\n        <div>\n        <p class=\"card__title\">${movie.title}</p>\n        <div class=\"card__container\">\n        <p class=\"card__genres\">${cardGenres} | </p>\n        <p class=\"card__year\"> ${parseInt(movie.release_date) ?? ''}</p>\n        </div>\n        </div>\n        </li>\n        </a>`;\n    })\n    .join('');\n}\n\nfunction getGenres() {\n  const fetchGenres = async () => {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`\n    );\n    const movies = await response.json();\n    return movies;\n  };\n\n  fetchGenres()\n    .then(data => {\n      console.log(typeof JSON.stringify(data.genres));\n      localStorage.setItem('localGenres', JSON.stringify(data.genres));\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}\n"],"names":["$ac0fe5be28a07c64$var$genres","$ac0fe5be28a07c64$var$formEl","document","querySelector","$ac0fe5be28a07c64$var$message","$ac0fe5be28a07c64$var$markupContainer","$ac0fe5be28a07c64$var$loaderContainer","$ac0fe5be28a07c64$var$render","movies","innerHTML","map","movie","imageSrc","poster_path","cardGenres","reduce","previousValue","genre","genre_ids","includes","id","console","log","name","ref","title","parseInt","release_date","join","addEventListener","evt","preventDefault","inputValue","elements","searchQuery","value","hidden","async","response","fetch","json","fetchMovies","then","total_results","textContent","Error","localStorage","setItem","JSON","stringify","type","result","results","catch","error","finally","fetchGenres","data","genres","fetchTrending","parse","getItem"],"version":3,"file":"library.9e6ade00.js.map"}